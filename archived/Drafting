Drafting
========

Trying to design the code-flow
------------------------------

1. Ratio:

    > In: Resolution of MSx, Pan
    
        >> Raster Images as User Input Parameters
        >> read resolution using r.info, grass module \
            (r.info -s in G64, r.info -g in G7x)
        >> math in Python, function in Python
        
    > Intermediate Product: Ratio
        
    > Out: High Pass Filter Matrix, Modulator Factor
    
        >> CONSTANTS, ASCII file
        >> function in Python

2. High Pass Filtering

    > In: Panchromatic, HPF Matrix
    
        >> Raster Image (from User Input), ASCII file from function
        
            ## desired output
            #print
            #print "Desired output (following is hard-coded):"
            #print
            #print "MATRIX    5"
            #print "-1 " * 5 #print "-1 -1 -1 -1 -1"
            #print "-1 " * 5 #print "-1 -1 -1 -1 -1"
            #print "-1 -1 ", center_cell, "-1 -1"
            #print "-1 " * 5 #print "-1 -1 -1 -1 -1"
            #print "-1 " * 5 #print "-1 -1 -1 -1 -1"
            #print "DIVISOR   1"
            #print "TYPE      P"
        
    > Out: HPFi
    
        >> Raster Image (intermediate product)

3. Resampling

    > In: MSx

        >> Raster Image (User Input)
        
    > Out: Upscaled MSx
    
        >> 

4. Weighting and Adding HPF to MSx

    > In: HPFi * Weighting Factor, MSx
    > Out: Sharpened Image

5. Optionally, histogram matching

    > In: Sharpened Image, Mean & StdDev of input MSx
    > Out: Histogram Matched Sharpened Image


Methods for Objects?
====================

Methods required for potential Classes:
    
methods for pan:
- hpfa

methods for msx:
- resample


Helper Functions?
=================

- resolution ratio
- hpf matrix
- stddev and avg
- histogram matching